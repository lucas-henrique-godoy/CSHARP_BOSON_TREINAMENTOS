							* CURSO DE C# DO CANAL BÓSON TREINAMENTOS *

NAMESPACES: Usado para organizar tipos (classes), permitindo evitar colisões de nomes. Basicamente, um namespace é uma coleção nomeada de classes.

- Boa prática: todas as classes devem ser definidas dentro de um namespace.
EX.:
Classe Console (definida pelo C#)
System.Console - nome completo.

_________________________________________________________________________________________________________________________________________________________________________
Classe Console(definida pelo usuário)
Namespace MinhasClasses
MinhasClasses.Console - nome completo.

Se eu colocar a minha classe em outro Namespace e usar o nome completo como: MinhasClasses. Console não gerará conflito. Mas se eu utilizar o nome parcial como: Console, ai terá conflito e eu teria que usar apenas uma das 2 classes Console o projeto.
_______________________________________________________________________________________________________________________________________________________________________

DIRETIVA USING: Trazem os Namespaces para o escopo  do projeto. Desta forma não é necessário qualificar explicitamente os objetos com o respectivo namspace. Ou seja, inclui outros namespaces no programa.
EX: Assim posso escrever: Console.WriteLine ao invés de System.Console.WriteLine.
_______________________________________________________________________________________________________________________________________________________________________

ASSEMBLY /MONTAGEM: As classes são compiladas em Assemblies - São arquivos, usualmente com a extensão .dll. As classes mais comuns, System.Console pertencem ao assembly mscorlib.dll. Uma montagem pode conter classes definidas em muitos namespaces, e um namespace pode ocupar vários assemblies. Para usarmos as classes de um assembly, devemos adicionar uma referência no projeto, e incluir a diretiva "using" adequada.
_______________________________________________________________________________________________________________________________________________________________________

REFERÊNCIAS: Uma referência permite que utilizemos tipos disponíveis em outros Assemblies, tanto do FLC quanto de terceiros.
FCL = Framework Class Library.
_______________________________________________________________________________________________________________________________________________________________________

DECLARAÇÃO DE VARIÁVEIS:
Sintaxe : tipo variável nome variável

EXEMPLOS:
int numero01;
strignme;

ATRIBUIÇÃO DE  VALORES A UMA VARIÁVEL: nome variável = valor;

EXEMPLO:
numero1= 30;
int numer02 = 200;

POSSO DECLARAR MAIS DE UMA VARIÁVEL QUE FOREM DO MESMO TIPO NAMESMA LINHA: int x, y;
AGORA DECLANDO E ATRIBUINDO VALOR: int x = 20, y = 30;

TIPS DIFERENTES: Linhas diferentes:
int x= 20;
boola = true.
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES ARITMÉTICOS: 
+ ADIÇÃO
- SUBTRAÇÃO
/ DVISÃO
* MULTIPLICAÇÃO
% MÓDULO(RESRO DA DIVISÃO INTEIRA)
_______________________________________________________________________________________________________________________________________________________________________

OBSERVAÇÕES: 

Divisão por zero é infinito.
Os tipos doble e float possuem um valor especial para representar o infinito: 5.0 / 0.0 -> +infinito.
Porém: 0.0 / 0.0 -> NaN (Not a Nuber), pois é um paradoxo - zero dividido por qualquer valor é zero, mas qualquer valor dividido por zero é infinito.
_______________________________________________________________________________________________________________________________________________________________________

PRECEDÊNCIA DOS OPERADORES: Os operadores são avaliados na seguinte ordem de precedência:

()
* / %
+ -
_______________________________________________________________________________________________________________________________________________________________________

CONVERÇÃO DE INTEIRO EM STRING: 
int numero = 123;
string numeroStr = numero.ToString(); // "123"

CONVERÇÃO DE STRING EM INTEIRO:
string valor01 = "25";
Console.WriteLine(Int32.Parse(valor01));
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES DE ATRIBUIÇÃO:
=: toma um valor e coloca dentro de uma variável.

+=: acumular valores dentro de uma variável. Tomar um valor que já está na variável e somar outro valor a esse valor anterior. Ex: var += valor é equivalente a var = var + valor.

-=: subtrai um valor de uma variável. Tomar um valor que já está na variável e subtrair outro valor. Ex: var -= valor é equivalente a var = var - valor.

*=: multiplica o valor atual da variável pelo valor especificado. Ex: var *= valor é equivalente a var = var * valor.

/=: divide o valor da variável pelo valor especificado. Ex: var /= valor é equivalente a var = var / valor.

%=: calcula o resto da divisão do valor da variável pelo valor especificado. Ex: var %= valor é equivalente a var = var % valor.
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES DE INCREMENTO E DECREMENTO

 Incremento e Decremento Pré-fixos: Incrementa a variável primeiro e depois executa o comando que esta asssociado a variável.
 ++variável |  variável = variável + 1 |  variável += 1
 --variável |  variável = variável - 1 |  variável -= 1

Incremento e Decremento Pós- fixos: Primeiro executa o comando associado a variável e depois incrementa a variável.
variável++   |  variável = variável + 1  |   variável += 1
variável--   |  variável = variável - 1  |   variável -= 1
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES RELACIONAIS E LÓGICOS:

USANDO OPERADORES BOOLEANOS: Um operador booleano é um operador que realiza um cálculo cujo resultado pode ser ture ou false. Em C# hhá vários operadores booleanos, que podem ser classificados em dois tipos distintos:
- Operadores Relacionais e de Igualdade:
== 	Igual a        x == 15
!= 	Diferente de   a != "Laranja"
< 	Menor          c < 40			
<= 	Menor que      x <= y
> 	Maior          salario > 100
>= 	Maior que      taxa >= 400



- Operadores Condicionais Lógicos: Permitem combinar expressões ou valores booleanos e retornar um resultado lógico.
! (NOT): Inverte o valor lógico de uma expressão. Se a expressão for verdadeira, o resultado é falso, e vice-versa.
&& (AND): Avalia dois ou mais valores lógicos. O resultado é verdadeiro apenas se todos os valores forem verdadeiros.
|| (OR): Avalia dois ou mais valores lógicos. O resultado é verdadeiro se pelo menos um dos valores for verdadeiro.
_______________________________________________________________________________________________________________________________________________________________________

ESTRUTURAS DE CONTROLE CONDICIONAL SIMPLES:

CONDICIONAL IF: Usada para testar condições e determinar as ações a seguir de acordo com o resultado do teste.
Sintaxe:
if (expressão) {	
    códigos a executar;	
}


ESTRUTURAS DE CONTROLE CONDICIONAL COMPOSTO:
Sintaxe:
if (expressão) {	
    códigos a executar se expressão for verdadeira;	
}
else
{
   códigos a executar se expressão for falsa;	
}
_______________________________________________________________________________________________________________________________________________________________________

DECLARAÇÃO SWITCH ("comando caso"). Só é possível usar com alguns tipos de dados como: int, string ou char. Nos caes devem ser sempre valores constantes, não é possível calculalos, ou seja para usar os valores nos cases eles não podem ser alterados.
Sintaxe:
switch (expressão)
{
  case valor_a_ser_comparado_01:
	código a ser executado
	brake;
 case valor_a_ser_comparado_02:
	código a ser executado
	brake;
 case valor_a_ser_comparado_03:
	código a ser executado
	brake;
 default:
	código a ser executado
	break;
}


OBS: Não é possível atribuir o mesmo valro para dois rótulos case distintos. 
EX: 
case 1:
case 1:
	código a ser executado
	brake;
_______________________________________________________________________________________________________________________________________________________________________

ESTRUTURAS DE REPETIÇÃO: É um bloco de códigos que pode ser repetido indefinidamente ou  um número definido de vezes em sequência automaticamente. As vezes precisamos que determinadas instruções seja repetidas várias vezes em sequência. Elas são:   WHILE, FOR, DO.
_______________________________________________________________________________________________________________________________________________________________________
ESTRUTURA WHILE ("Enquanto"): Usamos a declaração while para rodar um bloco de códigos repetidamente enquanto uma condição de teste especificada retornar verdadeiro (valor lógico).

Sintaxe:

while (expressão_teste) 
{
  código a ser repetido;
}

OBS: O while (true) cria um loop que nunca termina por conta própria, ou seja, ele continuará rodando até que um comando de saída (como break) seja encontrado.
EX: 
int numero;
while (true)
{
    Console.WriteLine("Digite um número; número 15 encerra o loop");
    numero = int.Parse(Console.ReadLine());
    if (numero == 15)
    {
        break;
    }
    else
    {
        Console.WriteLine("Número digitado: {0}, ", numero);
    }                
}
Console.WriteLine("Esta mensagem aparece após o encerramento do loop");
_______________________________________________________________________________________________________________________________________________________________________
ESTRUTURA FOR ("Para"): Difere do while, onde no while você tem que ficar se preocupando dentro do próprio código com a escrita de uma instrução que eventualmente encerre o loop, para que não tenha loop infinito. No For, é mais fácil, pois em uma linha já é possível definir o inicio e o fim do loop, ou seja devem ser loops para os quais você já saiba de antemão quantas vezes ele vai rodar. Exemplo de uso do for: Quando trabalhamos com arrays ou matrizes. Nem sempre será possível utilizar o for, terá situações onde precisaremos ter maior interação maior com o usuário, nesses casos devemos usar o while ou o do.

Sintaxe:
for (inicialização; expressão; controle) 
{
  comandos a executar;
}
_______________________________________________________________________________________________________________________________________________________________________

ESTRUTURA DO WHILE ("Faça Enquanto"): Os loops while e for testam a expressão booleana no início do loop. No caso da declaração do a expressão booleana é avaliada APÓS cada iteração; desta forma o corpo do loop será executado ao menos uma vez. Então se queremos uma aplicação que execute um comando antes de fazer um teste lógico para verificar se ele vai continuar sendo executado, deve-se utilizar o do. 
 
Sintaxe:

do 
{
  bloco de comandos;
}
while (expressão de teste);
_______________________________________________________________________________________________________________________________________________________________________

DECLARAÇÃO BREAK: Utilizada para sair imediatamente do corpo de um loop. O break interrompe o loop completamente, o continue interrompe uma iteração do loop mas sem sair do programa

DECLARAÇÃO CONTINUE: Podemos uma declaração continue para que um loop seja interrompido e realize a próxima iteração imediatamente, ignorando os comandos que estão após a declaração continue. Ou seja, o loop vai executando os comandos do seu bloco de comandos e ao encontrar a declaração continue,  ele para a execução(ele não executa o restante do bloco), mas ele não sai do loop, ele volta pro inicio avalia novamente e expressão do loop e começa de novo a iterar o bloco. O continue interrompe uma iteração do loop mas sem sair do programa, o break interrompe o loop completamente.
_______________________________________________________________________________________________________________________________________________________________________

ARRAY: Um array ("vetor") é uma sequência não-ordenada de itens. Todos os itens em um array são do mesmo tipo. Os itens em um array são armazenados em um bloco contíguo da memória RAM e são acessados por meio de um número de índice.

Sintaxe:
tipo[] nome_array;

Exemplo: int[] numeros_loteria;

OBS: O tamanho do array não faz parte da declaração. Podemos criar array de qualquer tipo, tanto de valor quanto de referência.

_______________________________________________________________________________________________________________________________________________________________________
CRIAR UMA INSTÂNCIA O ARRAY: Os arrays são tipos de referência, independentemente do tio de seus elementos. Ou seja, uma variável array faz referência a um boco de memória que armazenará os elementos do array no heap.
Assim como com as variáveis de classes,  memória não é alocada para o array até que criemos uma instância dele usando o operador new. O array somente recebe espaço na memória a instância é criada -  e é quando especificamos o tamanho do array.

Como a memória para  a instância do array é alocada dinamicanete, o tamanho do array pode ser calculado em tempo de execução:

int tamanho = Int32.Parse(Console.ReadLine());
int[] valores = new int[tamanho];

_______________________________________________________________________________________________________________________________________________________________________
PREENCHENDO UM ARRAY: Podemos inicializar os elementos de um array fornecendo uma lista de elementos separados por vírgulas, entre chaves:
int[] numeros_loteria = new int[6] {2, 23,, 34, 12, 29, 44};

Podemos também usar essa sintaxe:
int[] numeros_loteria = {2, 23,, 34, 12, 29, 44};

Omitindo a palavra new - o compilador calcula o tamanho do array a partir da lista de elementos inicializadores e gera o código que cria o array.
_______________________________________________________________________________________________________________________________________________________________________

ITERAÇÃO PELOS ELEMENTOS DE UM ARRAY: Podemos consultar a propriedade Length para descobrir quantos elementos um array possui, e assim iterar por eles usando um laço for:
int[] meuaaray = {2,4,6,3,5,9};
for (int i = 0; i < meuarray.Length; i++)
{
  Console.WriteLine(meuarray[i]);
}
_______________________________________________________________________________________________________________________________________________________________________

ITERAÇAO COM FOREACH: Podemos iterar pelos elementos de um array para retornar seus elementos sem nos preocuparmos em determinar seu tamanho, usando a estrutura foreach:
int[] meuarray = {2,4,6,3,5,9};
foreh (int elemento in mearray)  // a variável iterativa (elemento) deve ser do mesmo tipo dos valores que estão dentro do array.
{
   Console.WriteLine(elemento);
}

OBS: Não é possível  modificar os elementos do array enquanto é feita iteração com foreach(usar for). Mas se a intenção for somente retornar todos os elementos do array na sequencia, utilize o foreach, ele sempre itera por todos os elementos do array, começando em 0 e indo até o final.
_______________________________________________________________________________________________________________________________________________________________________

COPIANDO ARRAYS: Para copiarmos os dados de um array, vamos proceder da seguinte forma: Criamos uma nova instância de array do mesmo tipo e mesmo tamanho do array original. Depois, copiamos os elementos um por um do original para o novo array:
int[] números = {4,7,3,8,0};
int[] copiaNumeros = new int[números.Length];
for (int i = 0; i < numeros.Length; i++)
{
  copiaNumeros[i] = numeros[i];
}

MÉTODO CopyTo: Neste exemplo, copiaremos os elementos do array números para o array copiaNumeros, iniciando no elemento zero:

int[] números = {4,7,3,8,0};
int[] copiaNumeros = new int[numeros.Length];
números.CopyTo(copiaNumeros, 0);  


Inicializamos o array de destino antes de chamar o método.

OBS: o método CopyTo não necessariamente vai copiar todos os elementos, ele pode copiar todos os elementos se você quiser, mas ele pode copiar os elementos a partir de uma determinada posição apenas. O que permite que você copie um pedaço de um array para um array menor caso você precise.


EX: COPIANDO A PARTIR DA POSIÇÃO 0.
números.CopyTo(copiaNumeros, 0); 
O zero indica a primeira posição pelo qual eu quero começar a copiar os valores do array(pode ser de qualquer outra posição existente).
_______________________________________________________________________________________________________________________________________________________________________

MÉTODOS: Um método é uma sequência de declarações (comandos) que possui um nome de identificação. É similar a uma função ou procedimento. Um método possui um nome e um corpo onde ficam os comandos que serão executados quando o método for chamado. Os métodos também podem receber dados para processamento (parâmetros) e retornar informações.

DECLARAÇÃO DE MÉTODOS
Sintaxe:
acesso tipo retorno nome método (parâmetros)
{
   corpo do método (variáveis e declarações)
}

OBS-1: Em programação existem as funções que são sequencias de comandos que retornam dados, e existem os procedimentos que são sequencias de comandos que executam uma ação ou uma tarefa (ex: escrever uma mensagem na tela). Já métodos fazem as duas coisas, ele pode agir tanto como se fosse uma função, quanto como se fosse um procedimento, a diferença vai estar na forma como você escreve o método.  

OBS-2: Caso você esteja escrevendo um método que não retornará um valor, use a palavra void no lugar de tipo_retorno. O método deve sempre executar uma operação única, se você estiver escrevendo um método que faz mais de uma tarefa, mais de um calculo por exemplo, você esta fazendo errado, provavelmente o que voce tem que fazer é criar 2 métodos, uma para cada tarefa/operação.

OBS-3: O VOID significa este método executa uma tarefa e não retorna dados para o chamador.

OBS-4: O tipo de acesso no método, tem a ver com a visibilidade que o método. A partir de onde eu posso acessar esse método.

OBS-5: Os parênteses dos métodos devem sempre deverão estar  no método mesmo que não haja argumento nenhum para ser passado.

OBS-6: Os parâmetros são variáveis ou dados que você passa para o método enquanto você esta escrevendo o método. Os argumentos são as variáveis ou dados que você passa para o método na hora que você chama o método, e os argumentos são mapeados para os parâmetros correspondentes.

OBS-7: Tipo de acesso Static, significa que não preciso criar uma instância da classe para usar esse método. Ex: static void Main(string[] args).

OBS-8: Para poder usar uma classe, você cria uma instância dela que nós chamados de objeto, e utiliza esse objeto dentro do programa.
Então se um classe possui métodos, para poder acessar os método dessa classe, você instancia a classe primeiro criando um objeto e ai você consegue acessar os métodos dentro do objeto. Se declararmos um método como static, você não precisa criar uma instância para trabalhar com ele.

OBS-9: Não deve-se criar um método dentro de outro método. Inclusive, não deve-se criar um método dentro do método Main.


CHAMANDO MÉTODOS:
Sintaxe:
resultado = nome método(argumentos);

Se o método for void (não retorna valores), então a cláusula resultado = não será usada:
nome_método(argumentos);
_______________________________________________________________________________________________________________________________________________________________________

PARÂMETROS: Em C# temos quatro tipos de parâmetros de métodos: valor, ref, out, params.

PARÂMETROS DE VALOR: Este é o tipo padrão. Os parâmetros de valor passam uma cópia local de si mesmos ao método. Ou seja, o método usa o parâmetro, porém a cópia original do chamador não é modificada. O argumento passado deve ser do mesmo tipo do parâmetro, ou ao menos conversível implicitamente. 

PARÂMETROS REF: Prefixando um parâmetro com palavra ref, o compilador do C# gera código eu passa uma referência ao argumento real em vez de uma cópia do argumento. Tanto o argumento quanto o parâmetro referenciam os mesmo dados. Ou seja, ao executar um método que tenha um parâmetro do tipo ref, o método vai efetuar seus processamentos/cálculos, etc, retornar seus resultados e o próprio argumento passado vai ter o seu valor alterado também. Então valor que o usuário passou, que o programa passou para dentro do método será alterado também, além do próprio valor que o método calcula. Tanto o argumento passado quanto o parâmetro referenciam os mesmos dados da mesma área de memória que contém os dados.
_______________________________________________________________________________________________________________________________________________________________________

SOBRECARGA DE MÉTODOS: Métodos sobrecarregados são métodos que possuem o mesmo nome e são declarados no mesmo escopo. A sobrecarga é útil quando precisamos efetuar a operação em tipos diferentes de dados u conjuntos de informações que variam. 
Métodos sobrecarregados podem possuir número de parâmetros diferente ou ainda tipos de parâmetros diferentes. O tipo de dados de retorno, contudo, é sempre o mesmo para todos os métodos sobrecarregados. Um exemplo clássico é o método WriteLine da classe Console. 
_______________________________________________________________________________________________________________________________________________________________________

PARÂETOS OPCIONAIS EM MÉTODOS C#: 
- Valor padrão atribuído ao parâmetro. Isso que significa quena hora que você chama esse método, você vai ter 1 ou mais parâmetros que precisam ser passados e você ode configurar alguns deles com valor padrão. O parâmetro que tiver o valor padrão ele é opcional você ode ou não passar o argumento para esse método durante a  execução(durante a chamada do método), e se você passar um argumento ele vai usar aquele argumento como parâmetro. Se você não passar nenhum argumento, ele usa o valor padrão como parâmetro. Uma coisa importante quando você trabalhar com parâmetros opcionais, é que todos os parâmetros obrigatórios tem que ser especificados antes dos opcionais. Então se você tiver um método no qual você tem que passar vários parâmetros, alguns deles são opcionais e alguns não(obrigatórios), os obrigatórios tem que ser especificados antes.

OBS: Todos os parâmetros mandatórios devem ser especificados ANTES dos opcionais.

O C# usa a posição de cada argumento passado ao método para determinar a quais parâmetros eles se referem (em ordem!).
_______________________________________________________________________________________________________________________________________________________________________

ARGUMENTOS NOMEADOS: É possível passar os argumentos para um método em qualquer ordem.   

Os argumentos nomeados em C# permitem que você especifique os argumentos de um método usando seus nomes em vez de apenas sua posição. Isso traz várias vantagens:

Clareza: Facilita a leitura do código, pois fica claro o que cada argumento representa, especialmente em métodos com muitos parâmetros.

Flexibilidade: Permite que você omita argumentos opcionais ou especifique apenas os que deseja, sem se preocupar com a ordem.

Melhor manutenção: Ao adicionar novos parâmetros a um método, você não precisa se preocupar em mudar a ordem dos existentes, o que pode evitar erros.

Exemplo:

public void Configurar(int largura, int altura, string cor = "azul")
{
    // Configurações
}

// Chamada com argumentos nomeados
Configurar(altura: 200, largura: 300);
Neste exemplo, o parâmetro cor é opcional e, ao usar argumentos nomeados, você pode chamar o método sem especificar sua posição. Isso torna o código mais claro e fácil de entender.  
_______________________________________________________________________________________________________________________________________________________________________

MODOFICADORES DE ACESSO: Um modificador de acesso permite determinar o nível de acessibilidade dos membros e tipos em um método, controlando assim como eles podem - ou não - serem acessados por outros métodos ou a partir de outros assemblies. Os modificadores de acesso em C# são:

* PUBLIC(MAIS USADO): O tipo ou membro public pode ser acessado sem restrições por qualquer outro código no mesmo assembly ou em outros assemblies que façam referência a ele.

* PRIVATE(MAIS USADO): O tipo ou membro private só pode ser acessado por códigos que estejam na mesma classe ou struct.

* PROTECTED: O tipo ou membro protected só pode ser acessado por códigos da classe ou struct ao qual pertencem, ou ainda em uma classe que seja derivada desta classe que contém o modificador.

* INTERNAL: O tipo ou membro internal pode ser acessado por código que esteja no mesmo assembly, mas não por códigos presentes em outros assemblies (montagens). 

* PROTECTED INTERNAL: O tipo ou membro protected internal pode ser acessado por qualquer código no mesmo assembly, ou de uma classe derivada em outro assembly.
_______________________________________________________________________________________________________________________________________________________________________

MODIFICADOR STATIC: Podemos usar a palavra-chave static para criarmos um método estático, de modo que não seja necessário instanciar a classe para usá-lo. O modificador static indica que o membro em questão pertence à classe em si, e não às instâncias da classe. Apenas uma cópia do membro estático existe na aplicação, mesmo que várias instâncias da classe sejam criadas.

Sintaxe:
NA CLASSE ANIMAL: 
 public static void Mensagem()
 {
     Console.WriteLine("Método estático");
 }

NA CLASSE MAIN:
 Animal.Mensagem(); // É só usar a Nome_Classe.Nome_Método
	            // Executa o método estático Mensagem, não precisando instanciar a classe.

OBS: Existem métodos do próprio .NET Framework que são estáticos, como os métodos da classe Math.
_______________________________________________________________________________________________________________________________________________________________________

CLASSES: São "pacotes" de código que definem  tipos de dados, os quais possuem propriedades e operações (métodos) em linguagens orientadas a objetos (OOP). As propriedades armazenam valores e características dos dados. Já os métodos são funções internas às classes, que permitem agir sobre elas para executar ações.

OBJETOS: São instâncias de um tipo (classe) que possuem características e comportamentos. Podemos criar múltiplas instâncias de uma classe. As propriedades, métodos e eventos de uma classe são alocadas em memória através da instância de um objeto.

VANTAGENS DA OOP: 

1- Reutilização dos códigos:
2- Modularidades:
3- Uso mais simples (realístico):
4- Código mais limpo e claro:

CRIAR CLASSES: Usamos a palavra-chave class para definir uma nova classe. Exemplo:

class Caixa
{
    double lado;
    double Volume()
    {
        return lado * lado * lado;
    }
}
_______________________________________________________________________________________________________________________________________________________________________

CONSTRUTOR: Para que possamos usar essa classe ainda é necessário que o campo lado seja inicializado - é inacessível do exterior pois é privado. Faremos isso usando um Construtor.
Quando usamos a palavra new para criar um objeto, o runtime constrói o objeto usando a definição da classe. O runtime toma um pedaço da memória RAM, a preenche com os campos definidos pela classe e então invoca um construtor que realizará as inicializações requeridas.
Um Construtor é um método especial que roda automaticamente quando uma classe é instanciada. Possui o mesmo nome da classe,  e pode receber parâmetros, MAS NÃO RETORNA VALORES (nem mesmo void!). Toda classe deve ter um construtor; se um não for escrito, o compilador gerará um automaticamente - um que não faz absolutamente nada.
_______________________________________________________________________________________________________________________________________________________________________
  
CAMOS COMATILHADOS EM CLASSES: Campos compartilhados em C# são variáveis que pertencem à classe em si, em vez de a uma instância específica da classe. Esses campos são declarados com a palavra-chave static, o que significa que todas as instâncias da classe compartilham o mesmo valor desse campo.

Características dos Campos Compartilhados
Um só valor: Apenas uma cópia do campo é criada, independentemente de quantas instâncias da classe existam. Qualquer modificação no campo estático afeta todas as instâncias.

Acesso através da classe: Você acessa campos estáticos diretamente pela classe, não por instâncias. Por exemplo: ClasseNome.CampoEstático.

Uso comum: Campos estáticos são frequentemente usados para contadores, constantes ou dados que devem ser compartilhados entre todas as instâncias.

Exemplo Prático
Aqui está um exemplo simples para ilustrar como os campos compartilhados funcionam:

using System;

namespace ExemploCamposCompartilhados
{
    internal class Contador
    {
        // Campo compartilhado (estático)
        public static int totalContagens = 0;

        public Contador()
        {
            // Incrementa o contador ao criar uma nova instância
            totalContagens++;
        }

        public void ExibirTotalContagens()
        {
            Console.WriteLine("Total de instâncias: " + totalContagens);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Contador contador1 = new Contador();
            contador1.ExibirTotalContagens(); // Exibe: Total de instâncias: 1

            Contador contador2 = new Contador();
            contador2.ExibirTotalContagens(); // Exibe: Total de instâncias: 2

            Contador contador3 = new Contador();
            contador3.ExibirTotalContagens(); // Exibe: Total de instâncias: 3
        }
    }
}
Explicação do Exemplo
Classe Contador: Tem um campo estático totalContagens que conta quantas instâncias da classe foram criadas.
Construtor: Cada vez que uma nova instância de Contador é criada, o construtor incrementa totalContagens.
Método ExibirTotalContagens: Exibe o valor atual de totalContagens.
Classe Program: No método Main, criamos três instâncias de Contador, e cada vez que uma nova instância é criada, o valor de totalContagens aumenta.
Vantagens dos Campos Compartilhados
Economia de Memória: Como há apenas uma cópia do campo, isso pode economizar memória em comparação com campos de instância.
Facilidade de Compartilhamento: É fácil compartilhar dados entre diferentes instâncias da classe.
Considerações
Thread Safety: Se várias threads acessarem um campo estático simultaneamente, pode haver problemas de concorrência. Para evitar isso, técnicas de sincronização devem ser aplicadas.
Uso Moderado: Campos estáticos devem ser usados com cautela, pois podem levar a acoplamentos indesejados entre diferentes partes do código.

_______________________________________________________________________________________________________________________________________________________________________
			
				DIFERENÇAS ENTRE VARIAVEL ESTÁTICA E VARIÁVEL DE INSTÂNCIA:

MINHA DÚVIDA: entao se eu usar uma variavel estatica eu devo passa-la para que possa ser mostrada, do jeito que eu fiz ela deveria serr uma variavel publica ou de instancia certo?

O ChatGPT disse:
ChatGPT
Exatamente! Vamos esclarecer a diferença entre variáveis estáticas e variáveis de instância:

Variável Estática:

Pertence à classe e não a instâncias específicas.
Todas as instâncias da classe compartilham o mesmo valor.
Para acessar uma variável estática, você normalmente a chama pela classe (por exemplo, Acumula.soma).
Variável de Instância:

Pertence a uma instância específica da classe.
Cada instância pode ter um valor diferente.
Para acessar uma variável de instância, você a chama pela instância (por exemplo, objeto01.soma).
No Seu Caso:
Se você deseja que cada instância de Acumula tenha seu próprio valor de soma, deve usar uma variável de instância. Assim, cada objeto (objeto01, objeto02, etc.) poderá manter seu próprio estado.

Aqui está um exemplo que ilustra isso:

csharp
Copiar código
public class Acumula
{
    public int soma; // Variável de instância

    public void incrementa(int valor = 1)
    {
        soma += valor; // Incrementa a soma da instância
    }

    public override string ToString()
    {
        return soma.ToString(); // Retorna o valor atual de soma da instância
    }
}

// Uso
Acumula objeto01 = new Acumula();
Acumula objeto02 = new Acumula();

objeto01.incrementa(); // soma em objeto01 é 1
Console.WriteLine("O valor é {0}", objeto01.ToString()); // Exibe 1

objeto02.incrementa(8); // soma em objeto02 é 8
Console.WriteLine("O valor é {0}", objeto02.ToString()); // Deve exibir 8
Se você usasse uma variável estática:

csharp
Copiar código
public class Acumula
{
    public static int soma; // Variável estática

    public void incrementa(int valor = 1)
    {
        soma += valor; // Incrementa a soma estática
    }

    public override string ToString()
    {
        return soma.ToString(); // Retorna o valor atual de soma (estática)
    }
}

// Uso
Acumula objeto01 = new Acumula();
Acumula objeto02 = new Acumula();

objeto01.incrementa(); // soma agora é 1
Console.WriteLine("O valor é {0}", Acumula.soma.ToString()); // Exibe 1

objeto02.incrementa(8); // soma agora é 9 (1 + 8)
Console.WriteLine("O valor é {0}", Acumula.soma.ToString()); // Exibe 9
Neste caso, as chamadas a incrementa em qualquer instância afetariam a mesma variável soma. Portanto, escolha entre static e instance com base no comportamento desejado para sua aplicação.
_______________________________________________________________________________________________________________________________________________________________________

INTERFACES GRÁFICAS EM C#:

WINDOWS FORMS APPLICATION: Windows Forms é uma biblioteca de interface gráfica (GUI) para o desenvolvimento de aplicações desktop no Windows. Foi introduzida com o .NET Framework e permite que os desenvolvedores criem interfaces ricas usando arrastar e soltar controles em um designer visual. Algumas características incluem:

Facilidade de uso: A interface é simples, ideal para desenvolvedores que estão começando.
Controles prontos: Possui uma vasta gama de controles (botões, caixas de texto, grids, etc.) que facilitam a criação de aplicativos.
Desempenho: É adequada para aplicações simples e com um desempenho relativamente rápido.
Limitado em aparência: A personalização visual é mais restrita em comparação com WPF, e as animações e gráficos complexos podem ser difíceis de implementar.

_______________________________________________________________________________________________________________________________________________________________________

WINDOWS PRESENSENTATION FOUNDATION (WPF): WPF é uma tecnologia mais moderna e poderosa para a construção de aplicações desktop, também parte do .NET Framework, mas com um foco em fornecer interfaces de usuário mais ricas e flexíveis. Algumas de suas características incluem:

XAML: Utiliza XAML (eXtensible Application Markup Language) para descrever interfaces de usuário, o que permite separar a lógica de programação da apresentação.
Gráficos e animações: Suporta gráficos vetoriais, animações e layouts mais complexos, permitindo a criação de interfaces de usuário mais atraentes.
Data Binding: Facilita a ligação de dados entre a interface de usuário e a lógica da aplicação, promovendo uma arquitetura mais limpa.
Estilos e templates: Oferece suporte avançado para estilos e templates, permitindo uma personalização profunda da aparência dos controles.

COMPARAÇÃO:
Facilidade de uso: Windows Forms é mais simples, enquanto WPF oferece mais controle e flexibilidade, mas pode ter uma curva de aprendizado maior.
Aparência: WPF permite uma personalização visual muito mais rica em comparação ao Windows Forms.
Arquitetura: WPF promove uma separação melhor entre a lógica de negócios e a interface de usuário, facilitando a manutenção e a escalabilidade.
Essas duas tecnologias têm seu lugar, e a escolha entre elas geralmente depende dos requisitos específicos do projeto e das preferências dos desenvolvedores.
_______________________________________________________________________________________________________________________________________________________________________

TRATAMENTO DE EXCEÇÕES(Exception Handling):
É difícil assegurar que um trecho de código sempre funcione como esperado; falhas podem ocorrer por inúmeras razões, muitas além de nosso controle. Por isso nossas aplicações devem ser capazes de detectar falhas e manipulá-las de forma a evitar maiores problemas.

GERENCIAMENTO DE ERROS:
Para escrevermos programas que lidam com eventuais erros precisamos de duas coisas basicamente:
1. Escrever o código dentro de um bloco try. Ou seja, devo escrever dentro do try todo trecho de código que eu desconfiar que possa apresentar algum tipo de problema em algum momento.

2. Escrever um ou mais manipuladores catch logo após o bloco try, para manipular as condições de erro. Ou seja, devo escrever dentro do catch os erros que eu julgar que possam vir a ocorrer(execeções), e escrever um código para tratar algum eventual erro que possa ocorrer no código principal que está dentro do bloco try.
  
3. Opcionalmente podemos usar um bloco finally para definirmos códigos que sempre serão executados. Ou seja, devo escrever dentro do finally um código qualquer que vai sempre ser executado, independente do bloco try funcionar ou não. 

SINTAXE:
try
{
    // Código a ser executado
}
catch (Exceção Variável_ex)
{
    // Código para manipular a exceção
}

_______________________________________________________________________________________________________________________________________________________________________

EXEMPLO 1 :
 try
{
    // Tenta converter o texto da entrada em números inteiros
    int num1 = int.Parse(txtEntrada1.Text); // Converte o texto do primeiro campo
    int num2 = int.Parse(txtEntrada2.Text); // Converte o texto do segundo campo

    // Realiza a multiplicação dos dois números
    int resultado = num1 * num2;

    // Exibe o resultado da multiplicação no campo de saída
    txtSaida.Text = resultado.ToString();
}
catch (FormatException ex)
{
    // Captura exceções de formato (por exemplo, se o texto não puder ser convertido em número)
    MessageBox.Show(ex.Message, "Bloco catch"); // Exibe uma mensagem de erro com detalhes
}
finally
{
    // Este bloco é sempre executado, independentemente de ocorrer um erro ou não
    MessageBox.Show("Este bloco sempre será executado, independente de erros", "Bloco finally");
}

_______________________________________________________________________________________________________________________________________________________________________

EXEMPLO 2:
try
{
    // Tenta converter o texto da entrada em números inteiros
    int num1 = int.Parse(txtEntrada1.Text); // Converte o texto do primeiro campo
    int num2 = int.Parse(txtEntrada2.Text); // Converte o texto do segundo campo

    // Realiza a multiplicação dos dois números
    int resultado = num1 * num2;

    // Exibe o resultado da multiplicação no campo de saída
    txtSaida.Text = resultado.ToString();
}
catch (FormatException ex) // Captura erros de formato
{
    // Exibe uma mensagem se o texto não puder ser convertido em número
    MessageBox.Show("Digite apenas valores numéricos", "Bloco catch");
}
catch (OverflowException ex) // Captura erros de estouro
{
    // Exibe uma mensagem se a operação resultar em um número fora do intervalo permitido
    MessageBox.Show(ex.Message, "Segundo bloco catch");
}
catch (Exception ex) // Captura erros gerais e desconhecidos
{
    // Exibe uma mensagem para qualquer outra exceção não tratada
    MessageBox.Show("Erro Desconhecido", "Terceiro bloco catch");
}
finally
{
    // Este bloco é sempre executado, independentemente de ocorrer um erro ou não
    MessageBox.Show("Este bloco sempre será executado, independente de erros", "Bloco finally");
}


OBS: Vamos analisar os tipos de exceções usadas nos códigos.
1. FormatException
O que é: Esta exceção é lançada quando a conversão de uma string para um tipo numérico (como int) falha devido ao formato inadequado. Por exemplo, se o usuário tentar converter a string "abc" em um número, uma FormatException será gerada.
Uso nos Códigos:
No primeiro e no segundo código, o bloco catch para FormatException exibe uma mensagem pedindo para o usuário digitar apenas valores numéricos, ajudando a evitar erros ao tentar realizar operações com entradas inválidas.
2. OverflowException
O que é: Esta exceção é lançada quando uma operação aritmética resulta em um valor que está fora do intervalo permitido para o tipo de dado. Por exemplo, ao multiplicar dois inteiros que resultam em um número maior do que int.MaxValue (o maior valor que um int pode armazenar), uma OverflowException será gerada.
Uso nos Códigos:
No segundo código, o bloco catch para OverflowException captura essa situação e exibe uma mensagem informativa com os detalhes do erro. Isso é importante para informar ao usuário que o resultado da operação não pode ser representado como um inteiro.
3. Exception
O que é: Esta é a classe base para todas as exceções em C#. Quando você captura uma Exception, está capturando qualquer tipo de exceção que não tenha sido tratada por blocos catch anteriores. Isso inclui exceções específicas e não específicas.
Uso nos Códigos:
No segundo código, o bloco catch para Exception é usado para tratar quaisquer erros que não foram previstos pelos blocos anteriores. Isso garante que o programa não falhe abruptamente, oferecendo ao usuário uma mensagem genérica de erro para situações inesperadas.
Considerações Finais
Usar esses tipos de exceções permite que você escreva um código mais robusto e amigável ao usuário. Ao tratar especificamente as FormatException e OverflowException, você pode fornecer feedback mais direcionado, enquanto o tratamento genérico de Exception ajuda a cobrir casos imprevistos, garantindo que sua aplicação se comporte de maneira estável em diversas situações.

JANELA DE ERROS LIST DO VISUAL STUDIO 2022:
No Visual Studio 2022, a combinação de teclas Ctrl + Alt + E é usada para abrir a janela "Error List" (Lista de Erros). Essa janela exibe uma lista de erros, avisos e mensagens informativas sobre o seu projeto, permitindo que você veja rapidamente problemas de compilação, erros de código e outras notificações relevantes.

USOS DA JANELA "ERROR LIST":
Visualizar Erros: Mostra os erros de compilação e fornece detalhes sobre cada um deles.
Navegação Rápida: Você pode clicar em um erro na lista para ir diretamente ao local do código onde o problema está.
Filtros: A janela permite filtrar entre erros, avisos e mensagens, facilitando a identificação de problemas específicos.
Essa funcionalidade é bastante útil para depurar e corrigir problemas em seu código de forma eficiente.

EXISTE TAMBÉM O SITE DA MICROSOFT: https://learn.microsoft.com/pt-br/dotnet/csharp/fundamentals/exceptions/using-exceptions. Que é uma parte da documentação oficial da Microsoft para a linguagem C#. Este artigo específico trata do uso de exceções em C# e cobre vários tópicos importantes sobre como trabalhar com exceções de maneira eficaz.
_______________________________________________________________________________________________________________________________________________________________________

ENUMERAÇÕES(Enums): Uma enumeração é um tipo de dados cujos valores são limitados a um conjunto de nomes simbólicos. Por exemplo, podemos criar uma enumeração cujos valores sejam os meses do ano. Esses valores são chamados de elementos ou membros.

DECLARAÇÃO DE ENUMERAÇÕES: Definimos ua enumeração com o uso da palavra enum:
SINTAXE: enum nome enumeração { elemento1, elemento2, ..., elementoN}

EXEMPLO:
enum Mes { Janeiro, Fevereiro, Março, Abril, Maio, Junho, Julho, Agosto, Setembro, Outubro, Novembro, Dezembro }

OBS: É um tipo de dado que você usa para limitar o conjunto de valores em uma variável qualquer, ou seja no caso acima só irá aceitar atribuir a variável Mes os valores de nomes dos meses que foram definidos. Qualquer outro valor que eu tente atribuir a variável do tipo Mes será inválida.

OBS2: O enum Mes é um tipo de dado que representa um conjunto fixo de valores, neste caso, os meses do ano. Ao declarar uma variável do tipo Mes, ela só pode assumir um dos valores definidos (Janeiro, Fevereiro, Março, etc.), o que ajuda a garantir a integridade e a legibilidade do código.






