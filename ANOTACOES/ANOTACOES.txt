							* CURSO DE C# DO CANAL BÓSON TREINAMENTOS *

NAMESPACES: Usado para organizar tipos (classes), permitindo evitar colisões de nomes. Basicamente, um namespace é uma coleção nomeada de classes.

- Boa prática: todas as classes devem ser definidas dentro de um namespace.
EX.:
Classe Console (definida pelo C#)
System.Console - nome completo.

_________________________________________________________________________________________________________________________________________________________________________
Classe Console(definida pelo usuário)
Namespace MinhasClasses
MinhasClasses.Console - nome completo.

Se eu colocar a minha classe em outro Namespace e usar o nome completo como: MinhasClasses. Console não gerará conflito. Mas se eu utilizar o nome parcial como: Console, ai terá conflito e eu teria que usar apenas uma das 2 classes Console o projeto.
_________________________________________________________________________________________________________________________________________________________________________

DIRETIVA USING: Trazem os Namespaces para o escopo  do projeto. Desta forma não é necessário qualificar explicitamente os objetos com o respectivo namspace. Ou seja, inclui outros namespaces no programa.
EX: Assim posso escrever: Console.WriteLine ao invés de System.Console.WriteLine.
_________________________________________________________________________________________________________________________________________________________________________

ASSEMBLY /MONTAGEM: As classes são compiladas em Assemblies - São arquivos, usualmente com a extensão .dll. As classes mais comuns, System.Console pertencem ao assembly mscorlib.dll. Uma montagem pode conter classes definidas em muitos namespaces, e um namespace pode ocupar vários assemblies. Para usarmos as classes de um assembly, devemos adicionar uma referência no projeto, e incluir a diretiva "using" adequada.
_________________________________________________________________________________________________________________________________________________________________________

REFERÊNCIAS: Uma referência permite que utilizemos tipos disponíveis em outros Assemblies, tanto do FLC quanto de terceiros.
FCL = Framework Class Library.
