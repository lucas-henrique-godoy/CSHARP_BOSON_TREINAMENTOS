							* CURSO DE C# DO CANAL BÓSON TREINAMENTOS *

NAMESPACES: Usado para organizar tipos (classes), permitindo evitar colisões de nomes. Basicamente, um namespace é uma coleção nomeada de classes.

- Boa prática: todas as classes devem ser definidas dentro de um namespace.
EX.:
Classe Console (definida pelo C#)
System.Console - nome completo.

_________________________________________________________________________________________________________________________________________________________________________
Classe Console(definida pelo usuário)
Namespace MinhasClasses
MinhasClasses.Console - nome completo.

Se eu colocar a minha classe em outro Namespace e usar o nome completo como: MinhasClasses. Console não gerará conflito. Mas se eu utilizar o nome parcial como: Console, ai terá conflito e eu teria que usar apenas uma das 2 classes Console o projeto.
_______________________________________________________________________________________________________________________________________________________________________

DIRETIVA USING: Trazem os Namespaces para o escopo  do projeto. Desta forma não é necessário qualificar explicitamente os objetos com o respectivo namspace. Ou seja, inclui outros namespaces no programa.
EX: Assim posso escrever: Console.WriteLine ao invés de System.Console.WriteLine.
_______________________________________________________________________________________________________________________________________________________________________

ASSEMBLY /MONTAGEM: As classes são compiladas em Assemblies - São arquivos, usualmente com a extensão .dll. As classes mais comuns, System.Console pertencem ao assembly mscorlib.dll. Uma montagem pode conter classes definidas em muitos namespaces, e um namespace pode ocupar vários assemblies. Para usarmos as classes de um assembly, devemos adicionar uma referência no projeto, e incluir a diretiva "using" adequada.
_______________________________________________________________________________________________________________________________________________________________________

REFERÊNCIAS: Uma referência permite que utilizemos tipos disponíveis em outros Assemblies, tanto do FLC quanto de terceiros.
FCL = Framework Class Library.
_______________________________________________________________________________________________________________________________________________________________________

DECLARAÇÃO DE VARIÁVEIS:
Sintaxe : tipo variável nome variável

EXEMPLOS:
int numero01;
strignme;

ATRIBUIÇÃO DE  VALORES A UMA VARIÁVEL: nome variável = valor;

EXEMPLO:
numero1= 30;
int numer02 = 200;

POSSO DECLARAR MAIS DE UMA VARIÁVEL QUE FOREM DO MESMO TIPO NAMESMA LINHA: int x, y;
AGORA DECLANDO E ATRIBUINDO VALOR: int x = 20, y = 30;

TIPS DIFERENTES: Linhas diferentes:
int x= 20;
boola = true.
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES ARITMÉTICOS: 
+ ADIÇÃO
- SUBTRAÇÃO
/ DVISÃO
* MULTIPLICAÇÃO
% MÓDULO(RESRO DA DIVISÃO INTEIRA)
_______________________________________________________________________________________________________________________________________________________________________

OBSERVAÇÕES: 

Divisão por zero é infinito.
Os tipos doble e float possuem um valor especial para representar o infinito: 5.0 / 0.0 -> +infinito.
Porém: 0.0 / 0.0 -> NaN (Not a Nuber), pois é um paradoxo - zero dividido por qualquer valor é zero, mas qualquer valor dividido por zero é infinito.
_______________________________________________________________________________________________________________________________________________________________________

PRECEDÊNCIA DOS OPERADORES: Os operadores são avaliados na seguinte ordem de precedência:

()
* / %
+ -
_______________________________________________________________________________________________________________________________________________________________________

CONVERÇÃO DE INTEIRO EM STRING: 
int numero = 123;
string numeroStr = numero.ToString(); // "123"

CONVERÇÃO DE STRING EM INTEIRO:
string valor01 = "25";
Console.WriteLine(Int32.Parse(valor01));
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES DE ATRIBUIÇÃO:
=: toma um valor e coloca dentro de uma variável.

+=: acumular valores dentro de uma variável. Tomar um valor que já está na variável e somar outro valor a esse valor anterior. Ex: var += valor é equivalente a var = var + valor.

-=: subtrai um valor de uma variável. Tomar um valor que já está na variável e subtrair outro valor. Ex: var -= valor é equivalente a var = var - valor.

*=: multiplica o valor atual da variável pelo valor especificado. Ex: var *= valor é equivalente a var = var * valor.

/=: divide o valor da variável pelo valor especificado. Ex: var /= valor é equivalente a var = var / valor.

%=: calcula o resto da divisão do valor da variável pelo valor especificado. Ex: var %= valor é equivalente a var = var % valor.
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES DE INCREMENTO E DECREMENTO

 Incremento e Decremento Pré-fixos: Incrementa a variável primeiro e depois executa o comando que esta asssociado a variável.
 ++variável |  variável = variável + 1 |  variável += 1
 --variável |  variável = variável - 1 |  variável -= 1

Incremento e Decremento Pós- fixos: Primeiro executa o comando associado a variável e depois incrementa a variável.
variável++   |  variável = variável + 1  |   variável += 1
variável--   |  variável = variável - 1  |   variável -= 1
_______________________________________________________________________________________________________________________________________________________________________

OPERADORES RELACIONAIS E LÓGICOS:

USANDO OPERADORES BOOLEANOS: Um operador booleano é um operador que realiza um cálculo cujo resultado pode ser ture ou false. Em C# hhá vários operadores booleanos, que podem ser classificados em dois tipos distintos:
- Operadores Relacionais e de Igualdade:
== 	Igual a        x == 15
!= 	Diferente de   a != "Laranja"
< 	Menor          c < 40			
<= 	Menor que      x <= y
> 	Maior          salario > 100
>= 	Maior que      taxa >= 400



- Operadores Condicionais Lógicos: Permitem combinar expressões ou valores booleanos e retornar um resultado lógico.
! (NOT): Inverte o valor lógico de uma expressão. Se a expressão for verdadeira, o resultado é falso, e vice-versa.
&& (AND): Avalia dois ou mais valores lógicos. O resultado é verdadeiro apenas se todos os valores forem verdadeiros.
|| (OR): Avalia dois ou mais valores lógicos. O resultado é verdadeiro se pelo menos um dos valores for verdadeiro.
_______________________________________________________________________________________________________________________________________________________________________

ESTRUTURAS DE CONTROLE CONDICIONAL SIMPLES:

CONDICIONAL IF: Usada para testar condições e determinar as ações a seguir de acordo com o resultado do teste.
Sintaxe:
if (expressão) {	
    códigos a executar;	
}


ESTRUTURAS DE CONTROLE CONDICIONAL COMPOSTO:
Sintaxe:
if (expressão) {	
    códigos a executar se expressão for verdadeira;	
}
else
{
   códigos a executar se expressão for falsa;	
}
_______________________________________________________________________________________________________________________________________________________________________

DECLARAÇÃO SWITCH ("comando caso"). Só é possível usar com alguns tipos de dados como: int, string ou char.
Sintaxe:
switch (expressão)
{
  case valor_a_ser_comparado_01:
	código a ser executado
	brake;
 case valor_a_ser_comparado_02:
	código a ser executado
	brake;
 case valor_a_ser_comparado_03:
	código a ser executado
	brake;
 default:
	código a ser executado
	break;
}


OBS: Não é possível atribuir o mesmo valro para dois rótulos case distintos. 
EX: 
case 1:
case 1:
	código a ser executado
	brake;






